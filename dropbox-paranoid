#!/usr/bin/env python3.6
from config import DB_PATH, FIND_PATTERNS
from sys import exit
from subprocess import check_output, run
import os
from os.path import realpath, basename
import re

def myfind(path: str, *args):
    res = check_output(['find', path, *args]).decode('ascii')
    if len(res) == 0:
        return []
    else:
        return [l for l in res.split('\n') if len(l) > 0]

def is_dropbox_running() -> bool:
    res = run(['pidof', 'dropbox'])
    return res.returncode == 0

_EMACS_LOCKFILE_REGEX = re.compile(r'\w+@\w+.\d+:\d+')

def get_errors():
    res = []

    if not is_dropbox_running():
        res.append(('Dropbox is not running!', ''))

    # check for conflicts
    for desc, cmdline in FIND_PATTERNS.items():
        conflicts = myfind(DB_PATH, *cmdline)
        if len(conflicts) > 0:
            res.append(('Conflicts detected ({})'.format(desc), '\n'.join(conflicts)))


    def is_emacs_lockfile(f: str) -> bool:
        if not basename(f).startswith('.#'):
            return False
        link = os.readlink(f)
        return bool(_EMACS_LOCKFILE_REGEX.match(link))

    def is_internal(f: str) -> bool:
        return realpath(f).startswith(DB_PATH)

    # check for symlinks which point within Dropbox folder
    symlinks = myfind(DB_PATH, '-type', 'l')
    symlinks = [l for l in symlinks if is_internal(l) and not is_emacs_lockfile(l)]

    if len(symlinks) > 0:
        res.append(('Internal symlinks detected', '\n'.join(symlinks)))

    return res

errors = get_errors()

if len(errors) == 0:
    print("DB paranoid: everything is ok")
    exit(0)

for summary, message in errors:
    print(f"DB paranoid: {summary} {message}")

try:
    import notify2 # type: ignore
    import os
    os.environ['DISPLAY'] = ':0'
    notify2.init('DB paranoid')
    for summary, message in errors:
        n = notify2.Notification(
            summary=summary,
            message=message,
            icon='dialog-error',
        )
        n.show()
except ImportError:
    print("Install python3-notify2 to get desktop notifications")

exit(1)
